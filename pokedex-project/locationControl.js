import { resetPokemonCarousel } from "./cardsPokedex.js";
import { getAllLocationsPokemonCount, getLocationsByRegionName } from "./dataManager.js";
import { locationElementMap } from "./mapManager.js";

const regionDisplay = document.getElementsByClassName("region-screen")[0];
const locationDisplay = document.getElementsByClassName("location-screen")[0];
const rightButtonRegion = document.getElementsByClassName("right-button")[0];
const leftButtonRegion = document.getElementsByClassName("left-button")[0];
const rightButton = document.getElementsByClassName("right-button")[1];
const leftButton = document.getElementsByClassName("left-button")[1];
const mapRealContainer = document.getElementsByClassName("map-left-screen")[0];

// Vari√°veis globais para controle de localiza√ß√£o
let i = 0;
let listOfLocations = [];
let locationsWithPokemon = []; // Lista filtrada apenas com localiza√ß√µes que t√™m pok√©mon
let cachedRegionName = null; // Cache para evitar rec√°lculos desnecess√°rios

// Fun√ß√£o para filtrar localiza√ß√µes que t√™m pok√©mon
async function getLocationsWithPokemon(regionName) {
    // Verificar se j√° temos os dados em cache para esta regi√£o
    if (cachedRegionName === regionName && locationsWithPokemon.length > 0) {
        return locationsWithPokemon;
    }

    const [allLocations, pokemonCounts] = await Promise.all([
        getLocationsByRegionName(regionName),
        getAllLocationsPokemonCount(regionName)
    ]);

    // Criar um mapa de contagem de pok√©mons por locationId
    const countMap = new Map(pokemonCounts.map(item => [item.locationId, item.count]));

    // Filtrar apenas localiza√ß√µes que t√™m pok√©mon (count > 0)
    const filtered = allLocations.filter(location => {
        const count = countMap.get(location.location_id) || 0;
        return count > 0;
    });

    // Atualizar cache
    cachedRegionName = regionName;
    locationsWithPokemon = filtered;

    console.log(`üîç Filtradas ${filtered.length} localiza√ß√µes com pok√©mon de ${allLocations.length} total na regi√£o ${regionName}`);

    return filtered;
}

// Inicializar lista de localiza√ß√µes com pok√©mon
async function initializeLocationsList() {
    const regionName = regionDisplay.textContent.trim();
    const filtered = await getLocationsWithPokemon(regionName);
    listOfLocations = filtered; // Usar apenas localiza√ß√µes com pok√©mon

    if (listOfLocations.length > 0) {
        // S√≥ resetar o √≠ndice se estivermos iniciando pela primeira vez ou se a lista mudou
        if (i >= listOfLocations.length) {
            i = 0; // Reset apenas se o √≠ndice atual for inv√°lido
        }

        locationDisplay.textContent = listOfLocations[i].location_name;

        // Tentar selecionar a localiza√ß√£o no mapa
        const currentLocationId = listOfLocations[i].location_id;
        const el = locationElementMap.get(currentLocationId);
        if (el) {
            // Remover anima√ß√£o de todos os elementos
            locationElementMap.forEach(element => {
                element.style.animation = "";
            });

            // Aplicar clique e anima√ß√£o ao elemento atual
            setTimeout(() => {
                el.dispatchEvent(new Event("click"));
                el.style.animation = "blink-border 1.5s infinite";
            }, 100);
        }

        console.log(`üìç Lista de localiza√ß√µes inicializada: ${listOfLocations.length} localiza√ß√µes com pok√©mon (√≠ndice atual: ${i})`);
    } else {
        console.warn(`‚ö†Ô∏è Nenhuma localiza√ß√£o com pok√©mon encontrada na regi√£o: ${regionName}`);
        locationDisplay.textContent = "Sem localiza√ß√µes";
        i = 0;
    }
}

// Fun√ß√£o espec√≠fica para resetar para a primeira localiza√ß√£o (usado quando regi√£o muda)
async function resetToFirstLocation() {
    const regionName = regionDisplay.textContent.trim();
    const filtered = await getLocationsWithPokemon(regionName);
    listOfLocations = filtered;

    if (listOfLocations.length > 0) {
        i = 0; // For√ßar reset para primeira localiza√ß√£o
        locationDisplay.textContent = listOfLocations[0].location_name;

        const firstLocationId = listOfLocations[0].location_id;
        const el = locationElementMap.get(firstLocationId);
        if (el) {
            locationElementMap.forEach(element => {
                element.style.animation = "";
            });

            setTimeout(() => {
                el.dispatchEvent(new Event("click"));
                el.style.animation = "blink-border 1.5s infinite";
            }, 100);
        }

        // Resetar carrossel de pok√©mons
        resetPokemonCarousel();

        console.log(`üîÑ Reset para primeira localiza√ß√£o: ${listOfLocations[0].location_name}`);
    }
}

// Inicializar ao carregar
initializeLocationsList();

// Listener para mudan√ßas de regi√£o (quando os bot√µes left/right da regi√£o s√£o usados)
document.addEventListener('regionChanged', async (event) => {
    console.log('üåç Regi√£o mudou, atualizando lista de localiza√ß√µes...');

    // S√≥ atualizar se realmente mudou de regi√£o
    const currentRegionName = regionDisplay.textContent.trim();
    if (cachedRegionName !== currentRegionName) {
        await resetToFirstLocation(); // Usar fun√ß√£o espec√≠fica para reset

        // Disparar evento para outras partes do sistema se houver localiza√ß√µes
        if (listOfLocations.length > 0) {
            dispatchLocationChangeEvent(listOfLocations[0].location_name);
        }
    }
});

// Fun√ß√£o para disparar evento de mudan√ßa de localiza√ß√£o
function dispatchLocationChangeEvent(locationName) {
    const event = new CustomEvent('locationChanged', {
        detail: { locationName, source: 'location_control' }
    });
    document.dispatchEvent(event);
}

// Event listener para quando uma localiza√ß√£o √© selecionada no mapa
mapRealContainer.addEventListener('locationSelected', async (event) => {
    const { locationId, title } = event.detail;

    // Apenas sincronizar o √≠ndice sem reinicializar a lista
    const foundIndex = listOfLocations.findIndex(loc => loc.location_id === locationId);

    if (foundIndex !== -1) {
        i = foundIndex; // Sincronizar √≠ndice com a localiza√ß√£o selecionada
        locationDisplay.textContent = listOfLocations[i].location_name;

        // Remove anima√ß√£o de todos os elementos anteriores
        locationElementMap.forEach(el => {
            el.style.animation = "";
        });

        // Aplica anima√ß√£o ao elemento selecionado
        const el = locationElementMap.get(locationId);
        if (el) {
            el.style.animation = "blink-border 1.5s infinite";
        }

        // Resetar carrossel de pok√©mons
        resetPokemonCarousel();

        console.log(`üìç Localiza√ß√£o selecionada via mapa: ${listOfLocations[i].location_name} (√≠ndice: ${i})`);
    } else {
        console.warn(`Localiza√ß√£o com ID ${locationId} n√£o encontrada na lista de localiza√ß√µes com pok√©mon.`);
    }
});

rightButtonRegion.addEventListener("click", async function () {
    // Salvar regi√£o anterior para verificar se mudou
    const previousRegion = cachedRegionName;

    // Aguardar um momento para a regi√£o ser atualizada
    setTimeout(async () => {
        const currentRegionName = regionDisplay.textContent.trim();

        // S√≥ resetar se a regi√£o realmente mudou
        if (previousRegion !== currentRegionName) {
            await resetToFirstLocation(); // Usar fun√ß√£o espec√≠fica para reset
        }
    }, 100);
});

leftButtonRegion.addEventListener("click", async function () {
    // Salvar regi√£o anterior para verificar se mudou
    const previousRegion = cachedRegionName;

    // Aguardar um momento para a regi√£o ser atualizada
    setTimeout(async () => {
        const currentRegionName = regionDisplay.textContent.trim();

        // S√≥ resetar se a regi√£o realmente mudou
        if (previousRegion !== currentRegionName) {
            await resetToFirstLocation(); // Usar fun√ß√£o espec√≠fica para reset
        }
    }, 100);
});

rightButton.addEventListener("click", function () {
    // Verificar se h√° localiza√ß√µes dispon√≠veis
    if (listOfLocations.length === 0) {
        console.warn("Nenhuma localiza√ß√£o com pok√©mon dispon√≠vel na regi√£o atual");
        return;
    }

    console.log(`‚û°Ô∏è Bot√£o direito clicado. √çndice atual: ${i}, Total: ${listOfLocations.length}`);

    // Adicionar feedback visual
    rightButton.style.transform = "scale(0.95)";
    setTimeout(() => {
        rightButton.style.transform = "scale(1)";
    }, 100);

    if (i < listOfLocations.length - 1) {
        i += 1;
    } else {
        i = 0;
    }

    console.log(`‚û°Ô∏è Novo √≠ndice: ${i}, Nova localiza√ß√£o: ${listOfLocations[i].location_name}`);

    // Atualizar display da localiza√ß√£o
    locationDisplay.textContent = listOfLocations[i].location_name;

    // Atualizar elemento no mapa
    const currentLocationId = listOfLocations[i].location_id;
    const el = locationElementMap.get(currentLocationId);
    if (el) {
        // Remover anima√ß√£o de todos os elementos
        locationElementMap.forEach(element => {
            element.style.animation = "";
        });

        // Aplicar clique e anima√ß√£o ao novo elemento
        el.dispatchEvent(new Event("click"));
        el.style.animation = "blink-border 1.5s infinite";
    }

    // Disparar evento para outras partes do sistema
    dispatchLocationChangeEvent(listOfLocations[i].location_name);

    // Resetar carrossel de pok√©mons
    resetPokemonCarousel();

    console.log(`üìç Localiza√ß√£o alterada para: ${listOfLocations[i].location_name}`);
});

leftButton.addEventListener("click", function () {
    // Verificar se h√° localiza√ß√µes dispon√≠veis
    if (listOfLocations.length === 0) {
        console.warn("Nenhuma localiza√ß√£o com pok√©mon dispon√≠vel na regi√£o atual");
        return;
    }

    console.log(`‚¨ÖÔ∏è Bot√£o esquerdo clicado. √çndice atual: ${i}, Total: ${listOfLocations.length}`);

    // Adicionar feedback visual
    leftButton.style.transform = "scale(0.95)";
    setTimeout(() => {
        leftButton.style.transform = "scale(1)";
    }, 100);

    if (i > 0) {
        i -= 1;
    } else {
        i = listOfLocations.length - 1;
    }

    console.log(`‚¨ÖÔ∏è Novo √≠ndice: ${i}, Nova localiza√ß√£o: ${listOfLocations[i].location_name}`);

    // Atualizar display da localiza√ß√£o
    locationDisplay.textContent = listOfLocations[i].location_name;

    // Atualizar elemento no mapa
    const currentLocationId = listOfLocations[i].location_id;
    const el = locationElementMap.get(currentLocationId);
    if (el) {
        // Remover anima√ß√£o de todos os elementos
        locationElementMap.forEach(element => {
            element.style.animation = "";
        });

        // Aplicar clique e anima√ß√£o ao novo elemento
        el.dispatchEvent(new Event("click"));
        el.style.animation = "blink-border 1.5s infinite";
    }

    // Disparar evento para outras partes do sistema
    dispatchLocationChangeEvent(listOfLocations[i].location_name);

    // Resetar carrossel de pok√©mons
    resetPokemonCarousel();

    console.log(`üìç Localiza√ß√£o alterada para: ${listOfLocations[i].location_name}`);
});
